{
    "name": "extended_ijcai",
    "context_variables": {
        "mental_state_description": {
            "type": "enum",
            "config": [
                "normal",
                "overloaded",
                "incapacitated"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "physical_state_description": {
            "type": "enum",
            "config": [
                "eye pain",
                "headache",
                "stomachache",
                "stomach pain"
            ],
            "known": {
                "type": "falg",
                "init": false
            }
        },
        "fire_context": {
            "type": "flag",
            "config": false,
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "fire_color": {
            "type": "enum",
            "config": [
                "red",
                "orange"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "instrument": {
            "type": "enum",
            "config": [
                "electronics",
                "communication",
                "wiring"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "smoke_description": {
            "type": "enum",
            "config": [
                "thick black",
                "black",
                "white",
                "blue",
                "none"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "fire_smell": {
            "type": "enum",
            "config": [
                "burning",
                "sulpher"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "location": {
            "type": "enum",
            "config": [
                "wing",
                "engine",
                "cabin",
                "electronics"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "seen_smoke": {
            "type": "flag",
            "config": false,
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "know_all_context_for_fire": {
            "type": "flag",
            "config": false
        },
        "know_all_context_for_landing_gear_malfunction": {
            "type": "flag",
            "config": false
        },
        "know_all_context_for_health": {
            "type": "flag",
            "config": false
        },
        "server_error": {
            "type": "flag",
            "config": false,
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "no_instructions": {
            "type": "flag",
            "config": false
        },
        "goal": {
            "type": "flag",
            "config": false,
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "emergency_type": {
            "type": "enum",
            "config": [
                "smoke_unknown_location_and_fire_known",
                "smell_known_location_required",
                "smoke_known_location_required",
                "landing_gear_malfunction_emergency",
                "physical_health_emergency",
                "mental_health_emergency"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "reached_server": {
            "type": "enum",
            "config": [
                "fire",
                "mental_health",
                "physical_health",
                "landing_gear",
                "none"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "landing_gear_specifier": {
            "type": "enum",
            "config": [
                "side",
                "nose"
            ],
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "server_status": {
            "type": "flag",
            "config": false,
            "known": {
                "type": "flag",
                "init": false
            }
        },
        "got_fire_instruction": {
            "type": "flag",
            "config": false
        },
        "got_landing_gear_instruction": {
            "type": "flag",
            "config": false
        },
        "got_health_instruction": {
            "type": "flag",
            "config": false
        },
        "physical_health_emergency": {
            "type": "flag",
            "config": false
        },
        "mental_health_emergency": {
            "type": "flag",
            "config": false
        },
        "foam_request": {
            "type": "flag",
            "config": false
        },
        "grass_request": {
            "type": "flag",
            "config": false
        },
        "reset_condition": {
            "type": "flag",
            "config": false
        },
        "force-statement": {
            "type": "flag",
            "config": false
        },
        "allow_single_slot_location": {
            "type": "flag",
            "config": false
        },
        "allow_single_slot_fire_color": {
            "type": "flag",
            "config": false
        },
        "emergency_type-value-smoke_unknown_location_and_fire_known": {
            "type": "flag",
            "config": false
        },
        "emergency_type-value-smell_known_location_required": {
            "type": "flag",
            "config": false
        },
        "emergency_type-value-smoke_known_location_required": {
            "type": "flag",
            "config": false
        },
        "emergency_type-value-landing_gear_malfunction_emergency": {
            "type": "flag",
            "config": false
        },
        "emergency_type-value-physical_health_emergency": {
            "type": "flag",
            "config": false
        },
        "emergency_type-value-mental_health_emergency": {
            "type": "flag",
            "config": false
        }
    },
    "intents": {
        "confirm": {
            "entities": [],
            "utterances": [
                "yes",
                "yeah",
                "yup",
                "affirmative",
                "aye"
            ],
            "type": "regular"
        },
        "deny": {
            "entities": [],
            "utterances": [
                "no",
                "nah",
                "negative",
                "not at all",
                "not really"
            ],
            "type": "regular"
        },
        "reset": {
            "entities": [],
            "utterances": [
                "undo last request",
                "start over",
                "Please restart the routine"
            ],
            "type": "regular"
        },
        "share-fire_emergency_with_location_and_color": {
            "entities": [
                "$fire_color",
                "$location"
            ],
            "utterances": [
                "I see $fire_color coming out of my $location.",
                "My $location is burning. I see $fire_color fire",
                "There's a $fire_color flame erupting from my $location.",
                "I'm observing a $fire_color blaze around the $location area.",
                "My $location is engulfed in $fire_color flames.",
                "Emitting $fire_color fire from my aircraft's $location.",
                "I have a $fire_color fire situation at the $location.",
                "Noticing a $fire_color glow in my $location.",
                "My $location is showing signs of a $fire_color fire emergency.",
                "There's a concerning $fire_color smoke coming from my $location.",
                "I've got a $fire_color fire spotted at my $location.",
                "My aircraft's $location is aflame with a $fire_color color.",
                "Detecting $fire_color flames emanating from the $location part.",
                "Immediate attention needed, my $location has a $fire_color fire outbreak.",
                "Reporting a fire emergency, observing $fire_color flames in the $location.",
                "Sighting a dangerous $fire_color fire originating from the aircraft's $location.",
                "My position is compromised due to a $fire_color fire in the $location.",
                "A visible $fire_color fire is affecting my aircraft's overall $location.",
                "Alert! My $location has sparked into a vivid $fire_color flame.",
                "Facing an emergency with a growing $fire_color fire near the $location.",
                "Urgent! A wildfire of color $fire_color in my aircraft's $location detected.",
                "There's a frightening flare of a $fire_color blaze at my aircraft's $location."
            ],
            "type": "regular"
        },
        "share-smoke_description": {
            "entities": [
                "$smoke_description"
            ],
            "utterances": [
                "$smoke_description",
                "I see $smoke_description smoke",
                "The smoke is $smoke_description",
                "Noticing $smoke_description",
                "Observing $smoke_description in the air.",
                "Detected $smoke_description smoke nearby.",
                "There's a $smoke_description hue in the smoke.",
                "Visibility impacted by $smoke_description smoke.",
                "The air is filled with $smoke_description smoke.",
                "Encountering $smoke_description smoke ahead.",
                "Smoke appears to be $smoke_description.",
                "The atmosphere has a $smoke_description tinge.",
                "Smoke looks quite $smoke_description today.",
                "$smoke_description plumes visible in the distance.",
                "Sighting $smoke_description smoke clouds.",
                "The skyline marred by $smoke_description smoke.",
                "Air quality is $smoke_description due to smoke.",
                "Smoke condition observed it\u2019s $smoke_description.",
                "Visual report Smoke transcends into a $smoke_description state.",
                "Airborne particles identified as $smoke_description in nature.",
                "Current  Smoke density has a $smoke_description quality."
            ],
            "type": "regular"
        },
        "share-location": {
            "entities": [
                "$location"
            ],
            "utterances": [
                "$location!",
                "from  $location.",
                "coming out of $location.",
                "I think $location!",
                "Located in $location.",
                "Hovering above $location.",
                "Exploring around $location.",
                "Positioned at $location.",
                "Residing within $location.",
                "fault identified in $location",
                "Issue coming out of $location",
                "triggered at $location",
                "On the exterior of $location",
                "in the vicnit of $location",
                "At $location",
                "Within the area of $location",
                "Linked to $location",
                "detected around $location",
                "Coming from $location",
                "On $location",
                "On the intereior of $location"
            ],
            "type": "regular"
        },
        "share-fire_color": {
            "entities": [
                "$fire_color"
            ],
            "utterances": [
                "The fire is $fire_color",
                "Flames have $fire_color",
                "Fire with $fire_color",
                "Observing a fire that's $fire_color.",
                "The blaze is characterized by $fire_color.",
                "Fire alert the color is $fire_color.",
                "We are witnessing $fire_color flames.",
                "The inferno presents $fire_color.",
                "Visual on fire, appears $fire_color.",
                "The fire's hue is notably $fire_color.",
                "The flame exhibits $fire_color.",
                "Fire situation it's showing $fire_color.",
                "The flame's essence is $fire_color.",
                "Encountering fire with a vivid $fire_color.",
                "Situation update fire is $fire_color.",
                "The conflagration is distinctly $fire_color.",
                "Immediate notice flames appear $fire_color.",
                "Reporting a fire situation with $fire_color coloring.",
                "The phenomena of the fire shows $fire_color aesthetics.",
                "Flames clearly demonstrating $fire_color characteristics."
            ],
            "type": "regular"
        },
        "share-fire_emergency_smell_and_location": {
            "entities": [
                "$fire_smell",
                "$location"
            ],
            "utterances": [
                "I smell $fire_smell in $location",
                "with $fire_smell in $location",
                "I smell $fire_smell in $location.",
                "Detected $fire_smell near $location.",
                "There's a scent of $fire_smell around $location.",
                "Noticing $fire_smell at $location.",
                "A $fire_smell is coming from $location.",
                "Identifying a $fire_smell within $location.",
                "A distinct $fire_smell noticeable in $location.",
                "Sensing $fire_smell close to $location.",
                "The air has a hint of $fire_smell at $location.",
                "Capturing a whiff of $fire_smell in the vicinity of $location.",
                "Experiencing a strong $fire_smell in the area of $location.",
                "Encounter with $fire_smell detected around $location.",
                "With an undeniable presence of $fire_smell at $location.",
                "Picking up a trace of $fire_smell near $location.",
                "There's an unmistakable smell of $fire_smell emanating from $location.",
                "Alert Smelling $fire_smell in the sector of $location.",
                "Warning The presence of a noticeable $fire_smell in proximity to $location.",
                "Observation a clear odor of $fire_smell found at $location.",
                "Reports indicate a notable smell of $fire_smell approaching the area of $location.",
                "Slight detection of a strong scent of $fire_smell circulating around $location.",
                "Acknowledging a prevalent and striking smell of $fire_smell near the premises of $location.",
                "Confirming the inhalation of a certain kind of a pungent smell, identified as $fire_smell, in the environment surrounding $location."
            ],
            "type": "regular"
        },
        "share-fire_smell": {
            "entities": [
                "$fire_smell"
            ],
            "utterances": [
                "I smell $fire_smell",
                "I sense $fire_smell",
                "$fire_smell",
                "Whiff of $fire_smell in the air",
                "I smell $fire_smell.",
                "I sense $fire_smell.",
                "$fire_smell.",
                "Whiff of $fire_smell in the air.",
                "Detecting a scent of $fire_smell.",
                "There's a strong $fire_smell present.",
                "Catching hints of $fire_smell.",
                "Noticing an odor of $fire_smell.",
                "The air has traces of $fire_smell.",
                "Sniffing out a bit of $fire_smell.",
                "Can detect the $fire_smell around.",
                "The essence of $fire_smell is noticeable.",
                "A clear scent of $fire_smell exists.",
                "I'm picking up on some $fire_smell.",
                "Got a noseful of $fire_smell here.",
                "An aroma of $fire_smell is in the vicinity.",
                "There\u2019s an undeniable smell of $fire_smell.",
                "The atmosphere is laden with $fire_smell.",
                "Experiencing the smell of $fire_smell strongly.",
                "A palpable sense of $fire_smell in the environment.",
                "Recognizing the distinct smell of $fire_smell."
            ],
            "type": "regular"
        },
        "share-landing_gear_malfunction": {
            "entities": [
                "$landing_gear_specifier"
            ],
            "utterances": [
                "My $landing_gear_specifier landing gear is stuck",
                "malfunction in $landing_gear_specifier landing gear",
                "$landing_gear_specifier landing gear malfunction",
                "$landing_gear_specifier landing gear gear issue",
                "$landing_gear_specifier landing gear not retracting",
                "$landing_gear_specifier landing gear won't deploy.",
                "Experiencing a problem with $landing_gear_specifier landing gear.",
                "Trouble with the $landing_gear_specifier landing gear operation.",
                "$landing_gear_specifier landing gear failure detected.",
                "Cannot engage $landing_gear_specifier landing gear.",
                "Facing a glitch with $landing_gear_specifier landing gear.",
                "Difficulty in operating $landing_gear_specifier landing gear.",
                "Warning signal for $landing_gear_specifier landing gear.",
                "$landing_gear_specifier landing gear refusing to open.",
                "The $landing_gear_specifier landing gear seems jammed.",
                "Problematic $landing_gear_specifier landing gear at this moment.",
                "Unexpected issue with the $landing_gear_specifier landing gear.",
                "Complications with retracting $landing_gear_specifier landing gear.",
                "The $landing_gear_specifier landing gear isn\u2019t functioning correctly.",
                "Detected anomaly in $landing_gear_specifier landing gear\u2019s functioning.",
                "Possible jam in the mechanism of $landing_gear_specifier landing gear.",
                "Alert malfunction within the $landing_gear_specifier landing gear system.",
                "Technical trouble impacting the $landing_gear_specifier landing gear efficiency."
            ],
            "type": "regular"
        },
        "share-emergency_service_standby": {
            "entities": [],
            "utterances": [
                "Request emergency services near the runway",
                "Request emergency services on standby",
                "Request rescue equipment for our landing",
                "Request emergency service for landing with no landing_gear",
                "Need immediate emergency services at the landing site.",
                "Prepare emergency medical teams by the runway.",
                "Alert fire brigade and medical support for arrival.",
                "Coordination requested for emergency response upon touchdown.",
                "Emergency crews needed due to potential landing complications.",
                "Call for standby emergency teams alongside the runway.",
                "Require immediate deployment of emergency services post-landing.",
                "Mobilize all necessary rescue and fire fighting units for the landing.",
                "Immediate readiness of emergency services requested upon our approach.",
                "Summon rapid response teams to aid in possible landing contingencies.",
                "Emergency assistance required immediately after landing attempt.",
                "Activate on-ground emergency units in preparation for our arrival.",
                "Operational readiness of emergency squads imperative for safe landing.",
                "Ensure comprehensive readiness of all emergency services at landing zone.",
                "Essential that ground emergencies are readied for any eventuality at landing.",
                "Escort from firefighting and medical units demanded at runway proximity.",
                "Solicit airport-wide alert for readiness of all emergency personnel."
            ],
            "type": "regular"
        },
        "share-foam_request": {
            "entities": [],
            "utterances": [
                "Request runway foam",
                "Request foam on the runway",
                "Is it possible to foam the runway?",
                "Is it possible to foam the runway within the available flight time?",
                "Request to prepare the runway 07 with foam for landing with landing gear",
                "Can we get foam coverage on the designated landing strip?",
                "Need foam deployment on the runway for an emergency landing.",
                "Urgently asking for the runway to be foamed prior to our landing.",
                "Please cover the runway with foam as a precautionary measure.",
                "Asking for foam spray over the runway to mitigate fire risk at landing.",
                "Could you apply foam on the runway surface to assist in our arrival?",
                "Considering our situation, please ensure foaming of the runway is done.",
                "For crash landing preparation, apply foam all over the intended runway.",
                "Immediate requirement runway foaming for emergency actions during landing.",
                "Foam requirement alert Please have the runway foamed for a belly landing.",
                "Safety request  overlay the landing area with foam due to gear malfunction.",
                "Affirmative action needed Full-scale foaming of runway to support our descent.",
                "Operational request  Initiate foaming protocol on our expected landing strip ASAP.",
                "Emergency protocol activation Require foaming of our landing trajectory immediately.",
                "Provision request Layering of firefighting foam across runway surface pre-landing required.",
                "How quickly can we get a layer of safety foam on our proposed landing strip?"
            ],
            "type": "regular"
        },
        "share-grass_strip": {
            "entities": [],
            "utterances": [
                "Request to switch to runway",
                "landing on gras runway",
                "prefer to land on gras",
                "going for the gras runway to reduce fire risk",
                "request for emergency landing left of runway on grass",
                "Request to prepare the runway 07 with foam for landing with landing gear.",
                "Opting for grass strip landing due to technical issues.",
                "Is the grass landing strip available for emergency use?",
                "Need clearance for an immediate grass strip landing.",
                "Diverting to grass strip for a safer emergency landing.",
                "Considering grass runway for touchdown, please confirm availability.",
                "Initiating approach towards grass field adjacent to main runway.",
                "Seeking permission for unscheduled landing on grass strip.",
                "Grass strip preferred for landing, awaiting go-ahead.",
                "Planning on utilizing grass strip for unexpected landing scenario.",
                "Coordinating for a rapid diversion to nearest grass landing area.",
                "Grass runway option being considered for imminent touchdown.",
                "Implementing immediate descent towards alternative grass strip.",
                "Final approach directed towards secondary grass landing venue.",
                "Preparing for contingency landing on designated grass zone.",
                "Announcing intent to execute landing procedure on grass strip due to urgency."
            ],
            "type": "regular"
        },
        "share-physical_health_status": {
            "entities": [
                "$physical_state_description"
            ],
            "utterances": [
                "I got $physical_state_description",
                "I have a $physical_state_description",
                "Having a $physical_state_description",
                "Suffering from a $physical_state_description.",
                "Experiencing a $physical_state_description.",
                "Feeling a bit $physical_state_description.",
                "Currently facing a $physical_state_description.",
                "Dealing with a $physical_state_description.",
                "I'm in a state of $physical_state_description.",
                "Enduring a $physical_state_description.",
                "I've been diagnosed with a $physical_state_description.",
                "I find myself with a $physical_state_description.",
                "It appears I have a $physical_state_description.",
                "Struggling with a $physical_state_description today.",
                "I am currently $physical_state_description.",
                "Noticed I've been quite $physical_state_description lately.",
                "My condition is a bit $physical_state_description at the moment.",
                "It feels like a $physical_state_description has hit me.",
                "Battling against a $physical_state_description right now.",
                "Encountering some $physical_state_description symptoms.",
                "My overall health is somewhat $physical_state_description currently."
            ],
            "type": "regular"
        },
        "share-mental_health_status": {
            "entities": [
                "$mental_state_description"
            ],
            "utterances": [
                "I feel $mental_state_description",
                "I have $mental_state_description",
                "Having a $mental_state_description",
                "Suffering from a $mental_state_description.",
                "Experiencing a $mental_state_description.",
                "Feeling a bit $mental_state_description.",
                "Currently facing a $mental_state_description.",
                "Dealing with a $mental_state_description.",
                "I'm in a state of $mental_state_description.",
                "Enduring a $mental_state_description.",
                "I've been diagnosed with a $mental_state_description.",
                "I find myself with a $mental_state_description.",
                "It appears I have a $mental_state_description.",
                "Struggling with a $mental_state_description today.",
                "I am currently $mental_state_description.",
                "Noticed I've been quite $mental_state_description lately.",
                "My condition is a bit $mental_state_description at the moment.",
                "It feels like a $mental_state_description has hit me.",
                "Battling against a $mental_state_description right now.",
                "Encountering some $mental_state_description symptoms.",
                "My overall health is somewhat $mental_state_description currently."
            ],
            "type": "regular"
        },
        "fallback": {
            "entities": [],
            "utterances": [],
            "type": "fallback"
        },
        "utter_msg": {
            "entities": [],
            "utterances": [],
            "type": "regular"
        }
    },
    "actions": {
        "determine_emergency_s_u": {
            "type": "system",
            "condition": [
                [
                    "location",
                    "Known"
                ],
                [
                    "fire_color",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "determine_emergency_s_u__update",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "emergency_type": {
                                "value": "smoke_unknown_location_and_fire_known",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": true,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "name": "determine_emergency_s_u_DETDUP_determine_emergency_s_u__update-EQ-update",
                        "intent": null,
                        "assignments": {
                            "$emergency_type": "found"
                        }
                    }
                ]
            }
        },
        "determine_emergency_l_r": {
            "type": "system",
            "condition": [
                [
                    "fire_smell",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "determine_emergency_l_r__update",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "emergency_type": {
                                "value": "smell_known_location_required",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": true,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "name": "determine_emergency_l_r_DETDUP_determine_emergency_l_r__update-EQ-update",
                        "intent": null,
                        "assignments": {
                            "$emergency_type": "found"
                        }
                    }
                ]
            }
        },
        "determine_emergency_s_k": {
            "type": "system",
            "condition": [
                [
                    "smoke_description",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "determine_emergency_s_k__update",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "emergency_type": {
                                "value": "smoke_known_location_required",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": true,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "name": "determine_emergency_s_k_DETDUP_determine_emergency_s_k__update-EQ-update",
                        "intent": null,
                        "assignments": {
                            "$emergency_type": "found"
                        }
                    }
                ]
            }
        },
        "determine_emergency_l_g": {
            "type": "system",
            "condition": [
                [
                    "landing_gear_specifier",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "determine_emergency_l_g__update",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "emergency_type": {
                                "value": "landing_gear_malfunction_emergency",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": true,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "name": "determine_emergency_l_g_DETDUP_determine_emergency_l_g__update-EQ-update",
                        "intent": null,
                        "assignments": {
                            "$emergency_type": "found"
                        }
                    }
                ]
            }
        },
        "determine_emergency_p_h": {
            "type": "system",
            "condition": [
                [
                    "physical_state_description",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "determine_emergency_p_h__update",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "emergency_type": {
                                "value": "physical_health_emergency",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": true,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "name": "determine_emergency_p_h_DETDUP_determine_emergency_p_h__update-EQ-update",
                        "intent": null,
                        "assignments": {
                            "$emergency_type": "found"
                        }
                    }
                ]
            }
        },
        "determine_emergency_m_h": {
            "type": "system",
            "condition": [
                [
                    "mental_state_description",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "determine_emergency_m_h__update",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "emergency_type": {
                                "value": "mental_health_emergency",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": true,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "name": "determine_emergency_m_h_DETDUP_determine_emergency_m_h__update-EQ-update",
                        "intent": null,
                        "assignments": {
                            "$emergency_type": "found"
                        }
                    }
                ]
            }
        },
        "inital_health_context": {
            "type": "system",
            "subtype": "Context dependent determination",
            "condition": [
                [
                    "emergency_type",
                    "Known"
                ],
                [
                    "physical_health_emergency",
                    false
                ],
                [
                    "mental_health_emergency",
                    false
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "inital_health_context__health_type",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "physical_health_emergency": {
                                "value": true,
                                "variable": "physical_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "context": {
                            "emergency_type": {
                                "value": "physical_health_emergency"
                            }
                        },
                        "name": "inital_health_context_DETDUP_inital_health_context__health_type-EQ-physical",
                        "intent": null,
                        "assignments": {}
                    },
                    {
                        "updates": {
                            "mental_health_emergency": {
                                "value": true,
                                "variable": "mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "context": {
                            "emergency_type": {
                                "value": "mental_health_emergency"
                            }
                        },
                        "name": "inital_health_context_DETDUP_inital_health_context__health_type-EQ-mental",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "get-info_mental": {
            "type": "dialogue",
            "message_variants": [
                "Any additional mental health info?"
            ],
            "condition": [
                [
                    "emergency_type",
                    "Known"
                ],
                [
                    "know_all_context_for_health",
                    false
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-mental_health_emergency",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "get-info_mental__set-smoke",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "emergency_type": {
                                "value": "physical_health_emergency",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": true,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "intent": "deny",
                        "name": "get-info_mental_DETDUP_get-info_mental__set-smoke-EQ-indicate_no_addition",
                        "assignments": {
                            "$emergency_type": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "get-info_mental_DETDUP_get-info_mental__set-smoke-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "fallback_message_variants": [
                "Sorry, I couldn't understand that input.",
                "Sorry, I didn't quite get that."
            ],
            "intents": {
                "deny": {
                    "entities": [],
                    "utterances": [
                        "no",
                        "nah",
                        "negative",
                        "not at all",
                        "not really"
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "get-info_physical": {
            "type": "dialogue",
            "message_variants": [
                "Any additional physical health info?"
            ],
            "condition": [
                [
                    "emergency_type",
                    "Known"
                ],
                [
                    "know_all_context_for_health",
                    false
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-physical_health_emergency",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "get-info_physical__set-smoke",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "know_all_context_for_health": {
                                "value": true,
                                "variable": "know_all_context_for_health",
                                "interpretation": "json"
                            }
                        },
                        "intent": "deny",
                        "name": "get-info_physical_DETDUP_get-info_physical__set-smoke-EQ-indicate_no_addition",
                        "assignments": {}
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "get-info_physical_DETDUP_get-info_physical__set-smoke-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "fallback_message_variants": [
                "Sorry, I couldn't understand that input.",
                "Sorry, I didn't quite get that."
            ],
            "intents": {
                "deny": {
                    "entities": [],
                    "utterances": [
                        "no",
                        "nah",
                        "negative",
                        "not at all",
                        "not really"
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "get-smoke_from_fire": {
            "type": "dialogue",
            "message_variants": [
                "Do you see any smoke?"
            ],
            "condition": [
                [
                    "emergency_type",
                    "Known"
                ],
                [
                    "seen_smoke",
                    "Unknown"
                ],
                [
                    "know_all_context_for_fire",
                    false
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-smoke_unknown_location_and_fire_known",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "get-smoke_from_fire__set-smoke",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "seen_smoke": {
                                "value": false,
                                "variable": "seen_smoke",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "know_all_context_for_fire": {
                                "value": true,
                                "variable": "know_all_context_for_fire",
                                "interpretation": "json"
                            }
                        },
                        "intent": "deny",
                        "name": "get-smoke_from_fire_DETDUP_get-smoke_from_fire__set-smoke-EQ-indicate_smoke_not_seen",
                        "assignments": {
                            "$seen_smoke": "found"
                        }
                    },
                    {
                        "updates": {
                            "seen_smoke": {
                                "value": true,
                                "variable": "seen_smoke",
                                "certainty": "Known",
                                "interpretation": "json"
                            }
                        },
                        "intent": "confirm",
                        "name": "get-smoke_from_fire_DETDUP_get-smoke_from_fire__set-smoke-EQ-indicate_smoke_seen",
                        "assignments": {
                            "$seen_smoke": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "get-smoke_from_fire_DETDUP_get-smoke_from_fire__set-smoke-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "fallback_message_variants": [
                "Sorry, I couldn't understand that input.",
                "Sorry, I didn't quite get that."
            ],
            "intents": {
                "deny": {
                    "entities": [],
                    "utterances": [
                        "no",
                        "nah",
                        "negative",
                        "not at all",
                        "not really"
                    ],
                    "type": "regular"
                },
                "confirm": {
                    "entities": [],
                    "utterances": [
                        "yes",
                        "yeah",
                        "yup",
                        "affirmative",
                        "aye"
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "smoke_from_dialog_location_color_known": {
            "type": "system",
            "condition": [
                [
                    "smoke_description",
                    "Known"
                ],
                [
                    "emergency_type",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-smoke_unknown_location_and_fire_known",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "smoke_from_dialog_location_color_known__set-context_known",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "know_all_context_for_fire": {
                                "value": true,
                                "variable": "know_all_context_for_fire",
                                "interpretation": "json"
                            }
                        },
                        "name": "smoke_from_dialog_location_color_known_DETDUP_smoke_from_dialog_location_color_known__set-context_known-EQ-set-all_context_known",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "smell_with_location_guess": {
            "type": "system",
            "condition": [
                [
                    "location",
                    "Known"
                ],
                [
                    "emergency_type",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-smell_known_location_required",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "smell_with_location_guess__set-context_known",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "know_all_context_for_fire": {
                                "value": true,
                                "variable": "know_all_context_for_fire",
                                "interpretation": "json"
                            }
                        },
                        "name": "smell_with_location_guess_DETDUP_smell_with_location_guess__set-context_known-EQ-set-all_context_known",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "smoke_with_location_guess": {
            "type": "system",
            "condition": [
                [
                    "location",
                    "Known"
                ],
                [
                    "emergency_type",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-smoke_known_location_required",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "smoke_with_location_guess__set-context_known",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "know_all_context_for_fire": {
                                "value": true,
                                "variable": "know_all_context_for_fire",
                                "interpretation": "json"
                            }
                        },
                        "name": "smoke_with_location_guess_DETDUP_smoke_with_location_guess__set-context_known-EQ-set-all_context_known",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "landing_gear_malfunction_get_landing_type": {
            "type": "dialogue",
            "message_variants": [
                "Where do you want to land on? Grass or foamed runway?"
            ],
            "condition": [
                [
                    "landing_gear_specifier",
                    "Known"
                ],
                [
                    "grass_request",
                    false
                ],
                [
                    "foam_request",
                    false
                ],
                [
                    "reset_condition",
                    false
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "landing_gear_malfunction_get_landing_type__set-context_known",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "foam_request": {
                                "value": true,
                                "variable": "foam_request",
                                "interpretation": "json"
                            },
                            "know_all_context_for_landing_gear_malfunction": {
                                "value": true,
                                "variable": "know_all_context_for_landing_gear_malfunction",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-foam_request",
                        "name": "landing_gear_malfunction_get_landing_type_DETDUP_landing_gear_malfunction_get_landing_type__set-context_known-EQ-set-all_context_known_foam",
                        "assignments": {}
                    },
                    {
                        "updates": {
                            "grass_request": {
                                "value": true,
                                "variable": "grass_request",
                                "interpretation": "json"
                            },
                            "know_all_context_for_landing_gear_malfunction": {
                                "value": true,
                                "variable": "know_all_context_for_landing_gear_malfunction",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-grass_strip",
                        "name": "landing_gear_malfunction_get_landing_type_DETDUP_landing_gear_malfunction_get_landing_type__set-context_known-EQ-set-all_context_known_grass",
                        "assignments": {}
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "landing_gear_malfunction_get_landing_type_DETDUP_landing_gear_malfunction_get_landing_type__set-context_known-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "fallback_message_variants": [
                "Sorry, I couldn't understand that input.",
                "Sorry, I didn't quite get that."
            ],
            "intents": {
                "share-foam_request": {
                    "entities": [],
                    "utterances": [
                        "Request runway foam",
                        "Request foam on the runway",
                        "Is it possible to foam the runway?",
                        "Is it possible to foam the runway within the available flight time?",
                        "Request to prepare the runway 07 with foam for landing with landing gear",
                        "Can we get foam coverage on the designated landing strip?",
                        "Need foam deployment on the runway for an emergency landing.",
                        "Urgently asking for the runway to be foamed prior to our landing.",
                        "Please cover the runway with foam as a precautionary measure.",
                        "Asking for foam spray over the runway to mitigate fire risk at landing.",
                        "Could you apply foam on the runway surface to assist in our arrival?",
                        "Considering our situation, please ensure foaming of the runway is done.",
                        "For crash landing preparation, apply foam all over the intended runway.",
                        "Immediate requirement runway foaming for emergency actions during landing.",
                        "Foam requirement alert Please have the runway foamed for a belly landing.",
                        "Safety request  overlay the landing area with foam due to gear malfunction.",
                        "Affirmative action needed Full-scale foaming of runway to support our descent.",
                        "Operational request  Initiate foaming protocol on our expected landing strip ASAP.",
                        "Emergency protocol activation Require foaming of our landing trajectory immediately.",
                        "Provision request Layering of firefighting foam across runway surface pre-landing required.",
                        "How quickly can we get a layer of safety foam on our proposed landing strip?"
                    ],
                    "type": "regular"
                },
                "share-grass_strip": {
                    "entities": [],
                    "utterances": [
                        "Request to switch to runway",
                        "landing on gras runway",
                        "prefer to land on gras",
                        "going for the gras runway to reduce fire risk",
                        "request for emergency landing left of runway on grass",
                        "Request to prepare the runway 07 with foam for landing with landing gear.",
                        "Opting for grass strip landing due to technical issues.",
                        "Is the grass landing strip available for emergency use?",
                        "Need clearance for an immediate grass strip landing.",
                        "Diverting to grass strip for a safer emergency landing.",
                        "Considering grass runway for touchdown, please confirm availability.",
                        "Initiating approach towards grass field adjacent to main runway.",
                        "Seeking permission for unscheduled landing on grass strip.",
                        "Grass strip preferred for landing, awaiting go-ahead.",
                        "Planning on utilizing grass strip for unexpected landing scenario.",
                        "Coordinating for a rapid diversion to nearest grass landing area.",
                        "Grass runway option being considered for imminent touchdown.",
                        "Implementing immediate descent towards alternative grass strip.",
                        "Final approach directed towards secondary grass landing venue.",
                        "Preparing for contingency landing on designated grass zone.",
                        "Announcing intent to execute landing procedure on grass strip due to urgency."
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "get-fire_instruction": {
            "type": "web_plan",
            "call": {
                "endpoint": "http://127.0.0.1:9000/create_plan",
                "default_payload": {
                    "id": 1,
                    "domain_file": "/home/qnc/upf-hierarchical/domain/domain_fond.hddl",
                    "problem_file": "/home/qnc/upf-hierarchical/problem/fire.hddl"
                }
            },
            "message_variants": [
                "Calling the server"
            ],
            "condition": [
                [
                    "know_all_context_for_fire",
                    true
                ],
                [
                    "reached_server",
                    "Unknown"
                ],
                [
                    "got_fire_instruction",
                    false
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "get-fire_instruction__set-get-fire_instruction",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "reached_server": {
                                "variable": "reached_server",
                                "certainty": "Known",
                                "value": null,
                                "interpretation": "json"
                            },
                            "got_fire_instruction": {
                                "value": true,
                                "variable": "got_fire_instruction",
                                "interpretation": "json"
                            }
                        },
                        "name": "get-fire_instruction_DETDUP_get-fire_instruction__set-get-fire_instruction-EQ-got_engine_fire_instruction",
                        "intent": null,
                        "assignments": {
                            "$reached_server": "found"
                        }
                    },
                    {
                        "updates": {
                            "reached_server": {
                                "variable": "reached_server",
                                "certainty": "Known",
                                "value": null,
                                "interpretation": "json"
                            },
                            "got_fire_instruction": {
                                "value": false,
                                "variable": "got_fire_instruction",
                                "interpretation": "json"
                            }
                        },
                        "name": "get-fire_instruction_DETDUP_get-fire_instruction__set-get-fire_instruction-EQ-got_engine_fire_instruction_false",
                        "intent": null,
                        "assignments": {
                            "$reached_server": "found"
                        }
                    }
                ]
            }
        },
        "get-landing_gear_instruction": {
            "type": "web_plan",
            "call": {
                "endpoint": "http://127.0.0.1:9000/create_plan",
                "default_payload": {
                    "id": 1,
                    "domain_file": "/home/qnc/upf-hierarchical/domain/domain_fond.hddl",
                    "problem_file": "/home/qnc/upf-hierarchical/problem/fire.hddl"
                }
            },
            "message_variants": [
                "Calling the server"
            ],
            "condition": [
                [
                    "know_all_context_for_landing_gear_malfunction",
                    true
                ],
                [
                    "reached_server",
                    "Unknown"
                ],
                [
                    "got_fire_instruction",
                    false
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "get-landing_gear_instruction__set-get-fire_instruction",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "reached_server": {
                                "variable": "reached_server",
                                "certainty": "Known",
                                "value": null,
                                "interpretation": "json"
                            },
                            "got_landing_gear_instruction": {
                                "value": true,
                                "variable": "got_landing_gear_instruction",
                                "interpretation": "json"
                            }
                        },
                        "name": "get-landing_gear_instruction_DETDUP_get-landing_gear_instruction__set-get-fire_instruction-EQ-got_engine_fire_instruction",
                        "intent": null,
                        "assignments": {
                            "$reached_server": "found"
                        }
                    },
                    {
                        "updates": {
                            "reached_server": {
                                "variable": "reached_server",
                                "certainty": "Known",
                                "value": null,
                                "interpretation": "json"
                            },
                            "got_landing_gear_instruction": {
                                "value": false,
                                "variable": "got_landing_gear_instruction",
                                "interpretation": "json"
                            }
                        },
                        "name": "get-landing_gear_instruction_DETDUP_get-landing_gear_instruction__set-get-fire_instruction-EQ-got_engine_fire_instruction_false",
                        "intent": null,
                        "assignments": {
                            "$reached_server": "found"
                        }
                    }
                ]
            }
        },
        "get-health_instruction": {
            "type": "web_plan",
            "call": {
                "endpoint": "http://127.0.0.1:9000/create_plan",
                "default_payload": {
                    "id": 1,
                    "domain_file": "/home/qnc/upf-hierarchical/domain/domain_fond.hddl",
                    "problem_file": "/home/qnc/upf-hierarchical/problem/fire.hddl"
                }
            },
            "message_variants": [
                "Calling the server"
            ],
            "condition": [
                [
                    "know_all_context_for_health",
                    true
                ],
                [
                    "reached_server",
                    "Unknown"
                ],
                [
                    "got_health_instruction",
                    false
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "get-health_instruction__set-get-fire_instruction",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "reached_server": {
                                "variable": "reached_server",
                                "certainty": "Known",
                                "value": null,
                                "interpretation": "json"
                            },
                            "got_health_instruction": {
                                "value": true,
                                "variable": "got_health_instruction",
                                "interpretation": "json"
                            }
                        },
                        "name": "get-health_instruction_DETDUP_get-health_instruction__set-get-fire_instruction-EQ-got_engine_fire_instruction",
                        "intent": null,
                        "assignments": {
                            "$reached_server": "found"
                        }
                    },
                    {
                        "updates": {
                            "reached_server": {
                                "variable": "reached_server",
                                "certainty": "Known",
                                "value": null,
                                "interpretation": "json"
                            },
                            "got_health_instruction": {
                                "value": false,
                                "variable": "got_health_instruction",
                                "interpretation": "json"
                            }
                        },
                        "name": "get-health_instruction_DETDUP_get-health_instruction__set-get-fire_instruction-EQ-got_engine_fire_instruction_false",
                        "intent": null,
                        "assignments": {
                            "$reached_server": "found"
                        }
                    }
                ]
            }
        },
        "complete-fire": {
            "type": "system",
            "condition": [
                [
                    "got_fire_instruction",
                    true
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "complete-fire__finish",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "goal": {
                                "value": true,
                                "variable": "goal",
                                "interpretation": "json"
                            }
                        },
                        "name": "complete-fire_DETDUP_complete-fire__finish-EQ-finish",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "complete": {
            "type": "system",
            "condition": [
                [
                    "got_landing_gear_instruction",
                    true
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "complete__finish",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "goal": {
                                "value": true,
                                "variable": "goal",
                                "interpretation": "json"
                            }
                        },
                        "name": "complete_DETDUP_complete__finish-EQ-finish",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "complete_health": {
            "type": "system",
            "condition": [
                [
                    "got_health_instruction",
                    true
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "complete_health__finish",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "goal": {
                                "value": true,
                                "variable": "goal",
                                "interpretation": "json"
                            }
                        },
                        "name": "complete_health_DETDUP_complete_health__finish-EQ-finish",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "complete_error": {
            "type": "system",
            "condition": [
                [
                    "got_fire_instruction",
                    false
                ],
                [
                    "got_health_instruction",
                    false
                ],
                [
                    "got_landing_gear_instruction",
                    false
                ],
                [
                    "reached_server",
                    "Known"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "complete_error__finish",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "goal": {
                                "value": true,
                                "variable": "goal",
                                "interpretation": "json"
                            }
                        },
                        "name": "complete_error_DETDUP_complete_error__finish-EQ-finish",
                        "intent": null,
                        "assignments": {}
                    }
                ]
            }
        },
        "dialogue_statement": {
            "type": "dialogue",
            "condition": [
                [
                    "force-statement",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "dialogue_statement__reset",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "force-statement": {
                                "value": false,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "utter_msg",
                        "name": "dialogue_statement_DETDUP_dialogue_statement__reset-EQ-lock",
                        "assignments": {}
                    }
                ]
            },
            "message_variants": [
                ""
            ],
            "disable-fallback": true,
            "intents": {
                "utter_msg": {
                    "entities": [],
                    "utterances": [],
                    "type": "regular"
                }
            }
        },
        "single_slot__location": {
            "type": "dialogue",
            "message_variants": [
                "Where is the fire?"
            ],
            "condition": [
                [
                    "location",
                    "Unknown"
                ],
                [
                    "allow_single_slot_location",
                    true
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "single_slot__location__validate-slot-fill",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "location": {
                                "value": "$location",
                                "variable": "location",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "allow_single_slot_location": {
                            "value": false
                        },
                        "intent": "share-location",
                        "response_variants": [
                            "Ok, ok"
                        ],
                        "name": "single_slot__location_DETDUP_single_slot__location__validate-slot-fill-EQ-fill-slot",
                        "assignments": {
                            "$location": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "single_slot__location_DETDUP_single_slot__location__validate-slot-fill-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "fallback_message_variants": [
                "I did not catch the fire location. Can you repeat it?"
            ],
            "intents": {
                "share-location": {
                    "entities": [
                        "$location"
                    ],
                    "utterances": [
                        "$location!",
                        "from  $location.",
                        "coming out of $location.",
                        "I think $location!",
                        "Located in $location.",
                        "Hovering above $location.",
                        "Exploring around $location.",
                        "Positioned at $location.",
                        "Residing within $location.",
                        "fault identified in $location",
                        "Issue coming out of $location",
                        "triggered at $location",
                        "On the exterior of $location",
                        "in the vicnit of $location",
                        "At $location",
                        "Within the area of $location",
                        "Linked to $location",
                        "detected around $location",
                        "Coming from $location",
                        "On $location",
                        "On the intereior of $location"
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "single_slot__fire_color": {
            "type": "dialogue",
            "message_variants": [
                "What color is the fire?"
            ],
            "condition": [
                [
                    "fire_color",
                    "Unknown"
                ],
                [
                    "allow_single_slot_fire_color",
                    true
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "single_slot__fire_color__validate-slot-fill",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "fire_color": {
                                "value": "$fire_color",
                                "variable": "fire_color",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "allow_single_slot_fire_color": {
                            "value": false
                        },
                        "intent": "share-fire_color",
                        "response_variants": [
                            "ok, noted"
                        ],
                        "name": "single_slot__fire_color_DETDUP_single_slot__fire_color__validate-slot-fill-EQ-fill-slot",
                        "assignments": {
                            "$fire_color": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "single_slot__fire_color_DETDUP_single_slot__fire_color__validate-slot-fill-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "fallback_message_variants": [
                "Sorry I did not catch the fire color. Can you repeat it?"
            ],
            "intents": {
                "share-fire_color": {
                    "entities": [
                        "$fire_color"
                    ],
                    "utterances": [
                        "The fire is $fire_color",
                        "Flames have $fire_color",
                        "Fire with $fire_color",
                        "Observing a fire that's $fire_color.",
                        "The blaze is characterized by $fire_color.",
                        "Fire alert the color is $fire_color.",
                        "We are witnessing $fire_color flames.",
                        "The inferno presents $fire_color.",
                        "Visual on fire, appears $fire_color.",
                        "The fire's hue is notably $fire_color.",
                        "The flame exhibits $fire_color.",
                        "Fire situation it's showing $fire_color.",
                        "The flame's essence is $fire_color.",
                        "Encountering fire with a vivid $fire_color.",
                        "Situation update fire is $fire_color.",
                        "The conflagration is distinctly $fire_color.",
                        "Immediate notice flames appear $fire_color.",
                        "Reporting a fire situation with $fire_color coloring.",
                        "The phenomena of the fire shows $fire_color aesthetics.",
                        "Flames clearly demonstrating $fire_color characteristics."
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "fire_emergency_location_color_driven": {
            "type": "dialogue",
            "message_variants": [
                "What can I help you with today?"
            ],
            "condition": [
                [
                    "fire_color",
                    "Unknown"
                ],
                [
                    "location",
                    "Unknown"
                ],
                [
                    "fire_smell",
                    "Unknown"
                ],
                [
                    "smoke_description",
                    "Unknown"
                ],
                [
                    "mental_state_description",
                    "Unknown"
                ],
                [
                    "physical_state_description",
                    "Unknown"
                ],
                [
                    "landing_gear_specifier",
                    "Unknown"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "fire_emergency_location_color_driven__validate-slot-fill-more",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "fire_color": {
                                "value": "$fire_color",
                                "variable": "fire_color",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "location": {
                                "value": "$location",
                                "variable": "location",
                                "certainty": "Known",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-fire_emergency_with_location_and_color",
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-fire_color_found-location_found",
                        "assignments": {
                            "$fire_color": "found",
                            "$location": "found"
                        }
                    },
                    {
                        "updates": {
                            "fire_color": {
                                "value": "$fire_color",
                                "variable": "fire_color",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "allow_single_slot_location": {
                                "value": true,
                                "variable": "allow_single_slot_location",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-fire_color",
                        "response_variants": [
                            "ok, noted"
                        ],
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-fire_color_found",
                        "assignments": {
                            "$fire_color": "found"
                        }
                    },
                    {
                        "updates": {
                            "location": {
                                "value": "$location",
                                "variable": "location",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "allow_single_slot_fire_color": {
                                "value": true,
                                "variable": "allow_single_slot_fire_color",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-location",
                        "response_variants": [
                            "Ok, ok"
                        ],
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-location_found",
                        "assignments": {
                            "$location": "found"
                        }
                    },
                    {
                        "updates": {
                            "fire_smell": {
                                "value": "$fire_smell",
                                "variable": "fire_smell",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type": {
                                "value": "smell_known_location_required",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": true,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-fire_smell",
                        "response_variants": [
                            "fire smell known"
                        ],
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-fire_smell_found",
                        "assignments": {
                            "$fire_smell": "found",
                            "$emergency_type": "found"
                        }
                    },
                    {
                        "updates": {
                            "smoke_description": {
                                "value": "$smoke_description",
                                "variable": "smoke_description",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "emergency_type": {
                                "value": "smoke_known_location_required",
                                "variable": "emergency_type",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_unknown_location_and_fire_known": {
                                "value": false,
                                "variable": "emergency_type-value-smoke_unknown_location_and_fire_known",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smell_known_location_required": {
                                "value": false,
                                "variable": "emergency_type-value-smell_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-smoke_known_location_required": {
                                "value": true,
                                "variable": "emergency_type-value-smoke_known_location_required",
                                "interpretation": "json"
                            },
                            "emergency_type-value-landing_gear_malfunction_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-landing_gear_malfunction_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-physical_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-physical_health_emergency",
                                "interpretation": "json"
                            },
                            "emergency_type-value-mental_health_emergency": {
                                "value": false,
                                "variable": "emergency_type-value-mental_health_emergency",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-smoke_description",
                        "response_variants": [
                            "smoke type known"
                        ],
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-smoke_description_found",
                        "assignments": {
                            "$smoke_description": "found",
                            "$emergency_type": "found"
                        }
                    },
                    {
                        "updates": {
                            "landing_gear_specifier": {
                                "value": "$landing_gear_specifier",
                                "variable": "landing_gear_specifier",
                                "certainty": "Known",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-landing_gear_malfunction",
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-landing_gear_specifier_found",
                        "assignments": {
                            "$landing_gear_specifier": "found"
                        }
                    },
                    {
                        "updates": {
                            "physical_state_description": {
                                "value": "$physical_state_description",
                                "variable": "physical_state_description",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-physical_health_status",
                        "response_variants": [
                            "body part known"
                        ],
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-physical_state_description_found",
                        "assignments": {
                            "$physical_state_description": "found"
                        }
                    },
                    {
                        "updates": {
                            "mental_state_description": {
                                "value": "$mental_state_description",
                                "variable": "mental_state_description",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-mental_health_status",
                        "response_variants": [
                            "mental state known"
                        ],
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-mental_state_description_found",
                        "assignments": {
                            "$mental_state_description": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "fire_emergency_location_color_driven_DETDUP_fire_emergency_location_color_driven__validate-slot-fill-more-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "fallback_message_variants": [
                "Sorry, I couldn't understand that input.",
                "Sorry, I didn't quite get that."
            ],
            "intents": {
                "share-fire_emergency_with_location_and_color": {
                    "entities": [
                        "$fire_color",
                        "$location"
                    ],
                    "utterances": [
                        "I see $fire_color coming out of my $location.",
                        "My $location is burning. I see $fire_color fire",
                        "There's a $fire_color flame erupting from my $location.",
                        "I'm observing a $fire_color blaze around the $location area.",
                        "My $location is engulfed in $fire_color flames.",
                        "Emitting $fire_color fire from my aircraft's $location.",
                        "I have a $fire_color fire situation at the $location.",
                        "Noticing a $fire_color glow in my $location.",
                        "My $location is showing signs of a $fire_color fire emergency.",
                        "There's a concerning $fire_color smoke coming from my $location.",
                        "I've got a $fire_color fire spotted at my $location.",
                        "My aircraft's $location is aflame with a $fire_color color.",
                        "Detecting $fire_color flames emanating from the $location part.",
                        "Immediate attention needed, my $location has a $fire_color fire outbreak.",
                        "Reporting a fire emergency, observing $fire_color flames in the $location.",
                        "Sighting a dangerous $fire_color fire originating from the aircraft's $location.",
                        "My position is compromised due to a $fire_color fire in the $location.",
                        "A visible $fire_color fire is affecting my aircraft's overall $location.",
                        "Alert! My $location has sparked into a vivid $fire_color flame.",
                        "Facing an emergency with a growing $fire_color fire near the $location.",
                        "Urgent! A wildfire of color $fire_color in my aircraft's $location detected.",
                        "There's a frightening flare of a $fire_color blaze at my aircraft's $location."
                    ],
                    "type": "regular"
                },
                "share-fire_color": {
                    "entities": [
                        "$fire_color"
                    ],
                    "utterances": [
                        "The fire is $fire_color",
                        "Flames have $fire_color",
                        "Fire with $fire_color",
                        "Observing a fire that's $fire_color.",
                        "The blaze is characterized by $fire_color.",
                        "Fire alert the color is $fire_color.",
                        "We are witnessing $fire_color flames.",
                        "The inferno presents $fire_color.",
                        "Visual on fire, appears $fire_color.",
                        "The fire's hue is notably $fire_color.",
                        "The flame exhibits $fire_color.",
                        "Fire situation it's showing $fire_color.",
                        "The flame's essence is $fire_color.",
                        "Encountering fire with a vivid $fire_color.",
                        "Situation update fire is $fire_color.",
                        "The conflagration is distinctly $fire_color.",
                        "Immediate notice flames appear $fire_color.",
                        "Reporting a fire situation with $fire_color coloring.",
                        "The phenomena of the fire shows $fire_color aesthetics.",
                        "Flames clearly demonstrating $fire_color characteristics."
                    ],
                    "type": "regular"
                },
                "share-location": {
                    "entities": [
                        "$location"
                    ],
                    "utterances": [
                        "$location!",
                        "from  $location.",
                        "coming out of $location.",
                        "I think $location!",
                        "Located in $location.",
                        "Hovering above $location.",
                        "Exploring around $location.",
                        "Positioned at $location.",
                        "Residing within $location.",
                        "fault identified in $location",
                        "Issue coming out of $location",
                        "triggered at $location",
                        "On the exterior of $location",
                        "in the vicnit of $location",
                        "At $location",
                        "Within the area of $location",
                        "Linked to $location",
                        "detected around $location",
                        "Coming from $location",
                        "On $location",
                        "On the intereior of $location"
                    ],
                    "type": "regular"
                },
                "share-fire_smell": {
                    "entities": [
                        "$fire_smell"
                    ],
                    "utterances": [
                        "I smell $fire_smell",
                        "I sense $fire_smell",
                        "$fire_smell",
                        "Whiff of $fire_smell in the air",
                        "I smell $fire_smell.",
                        "I sense $fire_smell.",
                        "$fire_smell.",
                        "Whiff of $fire_smell in the air.",
                        "Detecting a scent of $fire_smell.",
                        "There's a strong $fire_smell present.",
                        "Catching hints of $fire_smell.",
                        "Noticing an odor of $fire_smell.",
                        "The air has traces of $fire_smell.",
                        "Sniffing out a bit of $fire_smell.",
                        "Can detect the $fire_smell around.",
                        "The essence of $fire_smell is noticeable.",
                        "A clear scent of $fire_smell exists.",
                        "I'm picking up on some $fire_smell.",
                        "Got a noseful of $fire_smell here.",
                        "An aroma of $fire_smell is in the vicinity.",
                        "There\u2019s an undeniable smell of $fire_smell.",
                        "The atmosphere is laden with $fire_smell.",
                        "Experiencing the smell of $fire_smell strongly.",
                        "A palpable sense of $fire_smell in the environment.",
                        "Recognizing the distinct smell of $fire_smell."
                    ],
                    "type": "regular"
                },
                "share-smoke_description": {
                    "entities": [
                        "$smoke_description"
                    ],
                    "utterances": [
                        "$smoke_description",
                        "I see $smoke_description smoke",
                        "The smoke is $smoke_description",
                        "Noticing $smoke_description",
                        "Observing $smoke_description in the air.",
                        "Detected $smoke_description smoke nearby.",
                        "There's a $smoke_description hue in the smoke.",
                        "Visibility impacted by $smoke_description smoke.",
                        "The air is filled with $smoke_description smoke.",
                        "Encountering $smoke_description smoke ahead.",
                        "Smoke appears to be $smoke_description.",
                        "The atmosphere has a $smoke_description tinge.",
                        "Smoke looks quite $smoke_description today.",
                        "$smoke_description plumes visible in the distance.",
                        "Sighting $smoke_description smoke clouds.",
                        "The skyline marred by $smoke_description smoke.",
                        "Air quality is $smoke_description due to smoke.",
                        "Smoke condition observed it\u2019s $smoke_description.",
                        "Visual report Smoke transcends into a $smoke_description state.",
                        "Airborne particles identified as $smoke_description in nature.",
                        "Current  Smoke density has a $smoke_description quality."
                    ],
                    "type": "regular"
                },
                "share-landing_gear_malfunction": {
                    "entities": [
                        "$landing_gear_specifier"
                    ],
                    "utterances": [
                        "My $landing_gear_specifier landing gear is stuck",
                        "malfunction in $landing_gear_specifier landing gear",
                        "$landing_gear_specifier landing gear malfunction",
                        "$landing_gear_specifier landing gear gear issue",
                        "$landing_gear_specifier landing gear not retracting",
                        "$landing_gear_specifier landing gear won't deploy.",
                        "Experiencing a problem with $landing_gear_specifier landing gear.",
                        "Trouble with the $landing_gear_specifier landing gear operation.",
                        "$landing_gear_specifier landing gear failure detected.",
                        "Cannot engage $landing_gear_specifier landing gear.",
                        "Facing a glitch with $landing_gear_specifier landing gear.",
                        "Difficulty in operating $landing_gear_specifier landing gear.",
                        "Warning signal for $landing_gear_specifier landing gear.",
                        "$landing_gear_specifier landing gear refusing to open.",
                        "The $landing_gear_specifier landing gear seems jammed.",
                        "Problematic $landing_gear_specifier landing gear at this moment.",
                        "Unexpected issue with the $landing_gear_specifier landing gear.",
                        "Complications with retracting $landing_gear_specifier landing gear.",
                        "The $landing_gear_specifier landing gear isn\u2019t functioning correctly.",
                        "Detected anomaly in $landing_gear_specifier landing gear\u2019s functioning.",
                        "Possible jam in the mechanism of $landing_gear_specifier landing gear.",
                        "Alert malfunction within the $landing_gear_specifier landing gear system.",
                        "Technical trouble impacting the $landing_gear_specifier landing gear efficiency."
                    ],
                    "type": "regular"
                },
                "share-physical_health_status": {
                    "entities": [
                        "$physical_state_description"
                    ],
                    "utterances": [
                        "I got $physical_state_description",
                        "I have a $physical_state_description",
                        "Having a $physical_state_description",
                        "Suffering from a $physical_state_description.",
                        "Experiencing a $physical_state_description.",
                        "Feeling a bit $physical_state_description.",
                        "Currently facing a $physical_state_description.",
                        "Dealing with a $physical_state_description.",
                        "I'm in a state of $physical_state_description.",
                        "Enduring a $physical_state_description.",
                        "I've been diagnosed with a $physical_state_description.",
                        "I find myself with a $physical_state_description.",
                        "It appears I have a $physical_state_description.",
                        "Struggling with a $physical_state_description today.",
                        "I am currently $physical_state_description.",
                        "Noticed I've been quite $physical_state_description lately.",
                        "My condition is a bit $physical_state_description at the moment.",
                        "It feels like a $physical_state_description has hit me.",
                        "Battling against a $physical_state_description right now.",
                        "Encountering some $physical_state_description symptoms.",
                        "My overall health is somewhat $physical_state_description currently."
                    ],
                    "type": "regular"
                },
                "share-mental_health_status": {
                    "entities": [
                        "$mental_state_description"
                    ],
                    "utterances": [
                        "I feel $mental_state_description",
                        "I have $mental_state_description",
                        "Having a $mental_state_description",
                        "Suffering from a $mental_state_description.",
                        "Experiencing a $mental_state_description.",
                        "Feeling a bit $mental_state_description.",
                        "Currently facing a $mental_state_description.",
                        "Dealing with a $mental_state_description.",
                        "I'm in a state of $mental_state_description.",
                        "Enduring a $mental_state_description.",
                        "I've been diagnosed with a $mental_state_description.",
                        "I find myself with a $mental_state_description.",
                        "It appears I have a $mental_state_description.",
                        "Struggling with a $mental_state_description today.",
                        "I am currently $mental_state_description.",
                        "Noticed I've been quite $mental_state_description lately.",
                        "My condition is a bit $mental_state_description at the moment.",
                        "It feels like a $mental_state_description has hit me.",
                        "Battling against a $mental_state_description right now.",
                        "Encountering some $mental_state_description symptoms.",
                        "My overall health is somewhat $mental_state_description currently."
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "slot-fill__get-location_for_smell_driven": {
            "type": "dialogue",
            "message_variants": [
                "Whats your best guess where the smell is coming from?"
            ],
            "fallback_message_variants": [
                "Repeat please."
            ],
            "condition": [
                [
                    "location",
                    null
                ],
                [
                    "location",
                    "Unknown"
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-smell_known_location_required",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "slot-fill__get-location_for_smell_driven__validate-slot-fill",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "location": {
                                "value": "$location",
                                "variable": "location",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-location",
                        "response_variants": [
                            "noted the location"
                        ],
                        "name": "slot-fill__get-location_for_smell_driven_DETDUP_slot-fill__get-location_for_smell_driven__validate-slot-fill-EQ-location_found",
                        "assignments": {
                            "$location": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "slot-fill__get-location_for_smell_driven_DETDUP_slot-fill__get-location_for_smell_driven__validate-slot-fill-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "intents": {
                "share-location": {
                    "entities": [
                        "$location"
                    ],
                    "utterances": [
                        "$location!",
                        "from  $location.",
                        "coming out of $location.",
                        "I think $location!",
                        "Located in $location.",
                        "Hovering above $location.",
                        "Exploring around $location.",
                        "Positioned at $location.",
                        "Residing within $location.",
                        "fault identified in $location",
                        "Issue coming out of $location",
                        "triggered at $location",
                        "On the exterior of $location",
                        "in the vicnit of $location",
                        "At $location",
                        "Within the area of $location",
                        "Linked to $location",
                        "detected around $location",
                        "Coming from $location",
                        "On $location",
                        "On the intereior of $location"
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "slot-fill__get-location_for_smoke_driven": {
            "type": "dialogue",
            "message_variants": [
                "Whats your best guess where the smoke is coming from?"
            ],
            "fallback_message_variants": [
                "Repeat please."
            ],
            "condition": [
                [
                    "location",
                    null
                ],
                [
                    "location",
                    "Unknown"
                ],
                [
                    "force-statement",
                    false
                ],
                [
                    "emergency_type-value-smoke_known_location_required",
                    true
                ]
            ],
            "effect": {
                "global-outcome-name": "slot-fill__get-location_for_smoke_driven__validate-slot-fill",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "location": {
                                "value": "$location",
                                "variable": "location",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-location",
                        "response_variants": [
                            "noted the location"
                        ],
                        "name": "slot-fill__get-location_for_smoke_driven_DETDUP_slot-fill__get-location_for_smoke_driven__validate-slot-fill-EQ-location_found",
                        "assignments": {
                            "$location": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "slot-fill__get-location_for_smoke_driven_DETDUP_slot-fill__get-location_for_smoke_driven__validate-slot-fill-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "intents": {
                "share-location": {
                    "entities": [
                        "$location"
                    ],
                    "utterances": [
                        "$location!",
                        "from  $location.",
                        "coming out of $location.",
                        "I think $location!",
                        "Located in $location.",
                        "Hovering above $location.",
                        "Exploring around $location.",
                        "Positioned at $location.",
                        "Residing within $location.",
                        "fault identified in $location",
                        "Issue coming out of $location",
                        "triggered at $location",
                        "On the exterior of $location",
                        "in the vicnit of $location",
                        "At $location",
                        "Within the area of $location",
                        "Linked to $location",
                        "detected around $location",
                        "Coming from $location",
                        "On $location",
                        "On the intereior of $location"
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        },
        "slot-fill__get-smoke_description": {
            "type": "dialogue",
            "message_variants": [
                "Describe the smoke"
            ],
            "fallback_message_variants": [
                "Specify wether smoke is black or white?"
            ],
            "condition": [
                [
                    "seen_smoke",
                    true
                ],
                [
                    "seen_smoke",
                    "Known"
                ],
                [
                    "smoke_description",
                    null
                ],
                [
                    "smoke_description",
                    "Unknown"
                ],
                [
                    "force-statement",
                    false
                ]
            ],
            "effect": {
                "global-outcome-name": "slot-fill__get-smoke_description__validate-slot-fill",
                "type": "oneof",
                "outcomes": [
                    {
                        "updates": {
                            "smoke_description": {
                                "value": "$smoke_description",
                                "variable": "smoke_description",
                                "certainty": "Known",
                                "interpretation": "json"
                            },
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "share-smoke_description",
                        "response_variants": [
                            "noted fire color"
                        ],
                        "name": "slot-fill__get-smoke_description_DETDUP_slot-fill__get-smoke_description__validate-slot-fill-EQ-smoke_description_found",
                        "assignments": {
                            "$smoke_description": "found"
                        }
                    },
                    {
                        "updates": {
                            "force-statement": {
                                "value": true,
                                "variable": "force-statement",
                                "interpretation": "json"
                            }
                        },
                        "intent": "fallback",
                        "name": "slot-fill__get-smoke_description_DETDUP_slot-fill__get-smoke_description__validate-slot-fill-EQ-fallback",
                        "assignments": {}
                    }
                ]
            },
            "intents": {
                "share-smoke_description": {
                    "entities": [
                        "$smoke_description"
                    ],
                    "utterances": [
                        "$smoke_description",
                        "I see $smoke_description smoke",
                        "The smoke is $smoke_description",
                        "Noticing $smoke_description",
                        "Observing $smoke_description in the air.",
                        "Detected $smoke_description smoke nearby.",
                        "There's a $smoke_description hue in the smoke.",
                        "Visibility impacted by $smoke_description smoke.",
                        "The air is filled with $smoke_description smoke.",
                        "Encountering $smoke_description smoke ahead.",
                        "Smoke appears to be $smoke_description.",
                        "The atmosphere has a $smoke_description tinge.",
                        "Smoke looks quite $smoke_description today.",
                        "$smoke_description plumes visible in the distance.",
                        "Sighting $smoke_description smoke clouds.",
                        "The skyline marred by $smoke_description smoke.",
                        "Air quality is $smoke_description due to smoke.",
                        "Smoke condition observed it\u2019s $smoke_description.",
                        "Visual report Smoke transcends into a $smoke_description state.",
                        "Airborne particles identified as $smoke_description in nature.",
                        "Current  Smoke density has a $smoke_description quality."
                    ],
                    "type": "regular"
                },
                "fallback": {
                    "entities": [],
                    "utterances": [],
                    "type": "fallback"
                }
            }
        }
    }
}