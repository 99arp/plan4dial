name: extended_ijcai
context_variables:

  
  mental_state: 
    type: enum 
    known: 
      type: flag 
      init: false 
    options:
      - normal 
      - overloaded 
      - incapacitated
      
  body_part: 
    type: enum 
    known:
      type: falg 
      init: false
    options: 
      - eyes 
      - head 
      - stomach  

  fire_context: 
    type: flag 
    init: false
    known: 
      type: flag 
      init: false
  


  fire_color: 
    type: enum 
    known: 
      type: flag 
      init: false 
    options:
      - red 
      - orange 
  
  instrument: 
    type: enum 
    known: 
      type: flag 
      init: false
    options: 
      - electronics 
      - communication 


  smoke_description: 
    type: enum 
    known: 
      type: flag 
      init: false 
    options: 
      - thick black 
      - black 
      - white
      - blue
      - none 

  fire_smell:
    type: enum 
    known: 
      type: flag 
      init: false 
    options: 
      - burning 
      - sulpher


  location:
    type: enum 
    known: 
      type: flag 
      init: false
    options: 
      - wing
      - engine
  
  
  seen_smoke: 
    type: flag 
    init: false
    known:
      type: flag 
      init: false

  

  know_all_context_for_fire:
    type: flag 
    init: false 
  know_all_context_for_landing_gear_malfunction: 
    type: flag 
    init: false 
  
  know_all_context_for_health: 
    type: flag 
    init: false


  server_error: 
    type: flag 
    init: false
    known: 
      type: flag 
      init: false
  
  no_instructions: 
    type: flag 
    init: false

  
  goal:
    type: flag
    init: false
    known:
      type: flag
      init: false

  emergency_type: 
    type: enum
    known:
      type: flag 
      init: false
    options:
      - smoke_unknown_location_and_fire_known
      - smell_known_location_required
      - smoke_known_location_required
      - landing_gear_malfunction_emergency 
      - physical_health_emergency 
      - mental_health_emergency
  
  reached_server:
    type: enum 
    known: 
      type: flag 
      init: false 
    options:
      - fire
      - mental_health
      - physical_health 
      - landing_gear
      - none
      


  landing_gear_specifier: 
    type: enum 
    known: 
      type: flag 
      init: false 
    options: 
      - side 
      - nose
  

  server_status:
    type: flag 
    init: false 
    known: 
      type: flag 
      init: false 
  
  got_fire_instruction: 
    type: flag 
    init: false


  got_landing_gear_instruction: 
    type: flag 
    init: false

  
  got_health_instruction: 
    type: flag 
    init: false


  physical_health_emergency: 
    type: flag 
    init: false

  mental_health_emergency: 
    type: flag 
    init: false 
     


intents: 
  confirm:
    utterances:
      - "yes" 
      - yeah 
      - yup
      - affirmative
      - aye
  
  deny: 
    utterances:
      - "no"
      - nah 
      - negative 
      - not at all 
      - not really 
  
  share-call_for_help:
    utterances:
      - I have a problem 
      - I need help 
      - Can you help me?  



  share-fire_emergency_with_location_and_color:
    entities:
      - fire_color
      - location

    utterances:
      - I see $fire_color coming out of my $location. 
      - My $location is burning. I see $fire_color fire


  share-smoke_description: 
    entities:
      - smoke_description
    
    utterances:
      - $smoke_description
      - I see $smoke_description smoke 

  share-location: 
    entities:
      - location
    utterances:
      - $location!
      - My guess is $location. 
      - I think its from  $location. 
      - $location!, I guess. 




  share-fire_color: 
    entities:
      - fire_color
    utterances:
      - The hue I perceive matches $fire_color.
      - My sight captures the shade represented by $fire_color.
      - The tint I observe resembles $fire_color.
      - What meets my eyes mirrors $fire_color.
      - The pigment evident to me reflects $fire_color.
      - I discern a hue akin to $fire_color.
      - The color evident in my vision aligns with $fire_color.
      - What I perceive resembles the hue $fire_color.
      - My observation identifies the color as $fire_color.
      - The tone apparent to me resonates with $fire_color.


  share-fire_emergency_smell_and_location:
    entities:
      - fire_smell
      - location
    utterances:
      - Detecting $fire_smell in $location.
      - Distinct odor of $fire_smell coming from $location.
      - Whiff of $fire_smell in the air. I think its coming from $location. 
      - Pungent aroma signaling $fire_smell. Probably coming from $location
      - Unmistakable scent of $fire_smell in the air. My guess is its from $location.

  share-fire_smell: 
    entities:
      - fire_smell
    utterances:
      - I smell $fire_smell
      - I sense $fire_smell
      - $fire_smell
      - Whiff of $fire_smell in the air

  share-landing_gear_malfunction: 
    entities:
      - landing_gear_specifier
    utterances:
      - My $landing_gear_specifier landing gear is stuck 
      - $landing_gear_specifier landing gear stuck 
      - landing gear stuck 

  share-instrument: 
    entities:
      - instrument
    utterances:
      - My suspicion leans towards the $instrument.
      - I believe the $instrument is the culprit.
      - I reckon it's the $instrument at fault.
      - My intuition points towards the $instrument.
      - I suspect the $instrument is involved.
      - I have a feeling that the $instrument is to blame.
      - It seems likely that the $instrument is responsible.
      - The $instrument appears to be the source.
      - Signs suggest that the $instrument is involved.
      - It looks like the $instrument is causing the issue
  
  share-physical_health_status: 
    entities:
      - body_part
    utterances:
      - My $body_part hurts
      - I have a $body_part ache


  share-mental_health_status_with_takeover_request: 
    entities:
      - mental_state 
    utterances:
      - I feel $mental_state. Take over the controls 
      - Take over the controls. I am mentally $mental_state. 
  

  share-foam_request: 
    utterances:
      - Foam that thing 
      - Request foam from ATC
  
  share-grass_strip_request:
    utterances:
      - Grass it is 
      - I will land on the grass
  # share-take_over_request: 
  #     - Take over the controls. I cannot continue anymore 


actions:


  get-initial_help_request: 
    type: custom
    subtype: slot_fill_more

    parameters:
      message_variants:
        - What can I help you with today?
      condition:
        fire_color:
          known: false
        location:
          known: false
        fire_smell:
          known: false
        smoke_description: 
          known: false
        mental_state:
          known: false
        body_part:
          known: false
        landing_gear_specifier:
          known: false
      
      effect:
        determine_emergency_type: 
          oneof:
            outcomes:
             
              update-fire_emergency_location_color_driven:
                entities:
                  - fire_color
                  - location
                overall_intent: share-fire_emergency_with_location_and_color 
                config_entities:
                  fire_color:
                    fallback_message_variants:
                      - Sorry I did not catch the fire color. Can you repeat it? 
                    single_slot_message_variants:
                      - What color is the fire?  
                    single_slot_intent: share-fire_color
                  
                  location: 
                    fallback_message_variants:
                      - I did not catch the fire location. Can you repeat it? 
                    single_slot_message_variants:
                      - Where is the fire? 
                    single_slot_intent: share-location
                    clarify_message_variants:
                      - Is the fire in $location ? 
                additional_updates:
                  - outcome:
                      fire_color:
                        known: true 
                    response_variants:
                      - ok, noted 
                  - outcome:
                      location:
                        known: true
                    response_variants:
                      - Ok, ok   

              update-fire_emergency_smell_driven:
                entities:
                  - fire_smell
                
                overall_intent: share-fire_smell

                config_entities:
                  fire_smell: 
                    fallback_message_variants:
                      - Sorry, I did not understand the fire smell. Can you repeat it? 
                    single_slot_message_variants: 
                      - What does the fire smell like? 
                additional_updates:
                  - outcome:
                      fire_smell: 
                        known: true 
                    response_variants:
                      - fire smell known
                  - outcome:
                      emergency_type:
                        value: smell_known_location_required
                        known: true

                    
                    

              update-fire_emergency_smoke_driven:
                entities:
                  - smoke_description
                overall_intent: share-smoke_description

                config_entities:
                  smoke_description: 
                    fallback_message_variants:
                      - Sorry I did no understand the type of smoke. Can you repeat it? 
                    
                    single_slot_message_variants:
                      - What kind of smoke do you see? 
                    single_slot_intent: share-smoke_description
                    clarify_message_variants:
                      - So do you see $smoke_description smoke? 

                additional_updates:
                  - outcome:
                      smoke_description:
                        known: true 
                    response_variants:
                      - smoke type known 
                  - outcome: 
                      emergency_type:
                        value: smoke_known_location_required
                        known: true 

              update-landing_gear_malfunction: 
                entities:
                  - landing_gear_specifier 
                overall_intent: share-landing_gear_malfunction

                config_entities:
                  landing_gear_specifier: 
                    clarify_message_variants:
                      - Did you mean $landing_gear_specifier?
                  additional_updates:
                    - outcome:
                        landing_gear_specifier:
                          known: true 
                      response_variants:
                        - landing gear specifier known
              

              update-physical_health_emergency: 
                entities:
                  - body_part
                overall_intent: share-physical_health_status
                config_entities:
                  body_part: 
                    clarify_message_variants:
                      - Did you mean your $body_part? 
                additional_updates:
                  - outcome:
                      body_part: 
                        known: true 
                    response_variants:
                      - body part known


              update-mental_health_emergency: 
                entities:
                  - mental_state
                overall_intent: share-mental_health_status_with_takeover_request
                config_entities:
                  mental_state: 
                    clarify_message_variants: 
                      - Did you mean, you feel $mental_state? 
                additional_updates:
                  - outcome:
                      mental_state:
                        known: true 
                    response_variants:
                      - mental state known



  # This block here can be simplified once OR operator is implemented

  update-after_slot_fill_fire_emergency_location_color_driven: 
    type: system 
    condition:
      location: 
        known: true 
      fire_color: 
        known: true 
    effect:
      update: 
        oneof:
          outcomes: 
            update: 
              updates: 
                emergency_type:
                  value: smoke_unknown_location_and_fire_known
                  known: true

  update-after_slot_fill_fire_emergency_smell_driven: 
    type: system 
    condition:
      fire_smell: 
        known: true
    effect:
      update: 
        oneof:
          outcomes: 
            update: 
              updates: 
                emergency_type:
                  value: smell_known_location_required
                  known: true

  update-after_slot_fill_fire_emergency_smoke_driven: 
    type: system 
    condition:
      smoke_description: 
        known: true 
    effect:
      update: 
        oneof:
          outcomes: 
            update: 
              updates: 
                emergency_type:
                  value: smoke_known_location_required
                  known: true

  update-after_slot_fill_landing_gear_malfunction: 
    type: system 
    condition:
      landing_gear_specifier: 
        known: true 
    effect:
      update: 
        oneof:
          outcomes: 
            update: 
              updates: 
                emergency_type:
                  value: landing_gear_malfunction_emergency
                  known: true

  update-after_slot_fill_physical_health_emergency:  
    type: system 
    condition:
      body_part: 
        known: true 
    effect:
      update: 
        oneof:
          outcomes: 
            update: 
              updates: 
                emergency_type:
                  value: physical_health_emergency
                  known: true
                
  update-after_slot_fill_mental_health_emergency: 
    type: system 
    condition:
      mental_state: 
        known: true 
    effect:
      update: 
        oneof:
          outcomes: 
            update: 
              updates: 
                emergency_type:
                  value: mental_health_emergency
                  known: true


  inital_health_context: 
    type: system
    subtype: Context dependent determination 
    condition: 
      emergency_type:
        known: true
      physical_health_emergency:
        value: false 
      mental_health_emergency:
        value: false 
    effect: 
      update-health_type: 
        oneof:
          outcomes: 
            update-physical:
              updates:  
                physical_health_emergency:
                  value: true 
              context: 
                emergency_type:
                  value: physical_health_emergency
            update-mental:  
              updates: 
                mental_health_emergency:
                  value: true 
              context: 
                emergency_type:
                  value: mental_health_emergency

              

  get-info_mental: 
    type: dialogue
    message_variants:
      - Any additional mental health info? 
    condition:
      emergency_type:
        known: true
        value: mental_health_emergency
      know_all_context_for_health:
        value: false
   
    effect: 
      set-smoke: 
        oneof: 
          outcomes: 
            indicate_no_addition:
              updates:
                # know_all_context_for_health:
                #   value: true
                  # This is to loop to physical_health_emergency
                emergency_type:
                  known: true
                  value: physical_health_emergency
              intent: deny  
            # ADD any other outcomes here


  get-info_physical: 
    type: dialogue
    message_variants:
      - Any additional physcial health info? 
    condition:
      emergency_type:
        known: true
        value: physical_health_emergency
      know_all_context_for_health:
        value: false
   
    effect: 
      set-smoke: 
        oneof: 
          outcomes: 
            indicate_no_addition:
              updates:
                know_all_context_for_health:
                  value: true
              intent: deny 
            # ADD any other outcomes here




  
  get-smoke_from_fire: 
    type: dialogue
    message_variants:
      - Do you see any smoke? 
    condition:
      emergency_type:
        known: true
        value: smoke_unknown_location_and_fire_known
      seen_smoke:
        known: false
      know_all_context_for_fire:
        value: false
   
    effect: 
      set-smoke: 
        oneof: 
          outcomes: 
            indicate_smoke_not_seen:
              updates:
                seen_smoke:
                  value: false
                  known: true
                know_all_context_for_fire:
                  value: true
              intent: deny 
            indicate_smoke_seen: 
              updates: 
                seen_smoke:
                  value: true 
                  known: true
              intent: confirm


  get-location_for_smell_driven:
    type: custom
    subtype: slot_fill
    condition:
      emergency_type: 
        value: smell_known_location_required
    parameters:
      action_name:  get-location_for_smell_driven
      overall_intent: share-location
      entities:
        - location
      message_variants:
        - Whats your best guess where the smell is coming from?
      fallback_message_variants:
        - Repeat please. 
      
      config_entities:
        location:
          clarify_message_variants:
            - Did you mean $location?
      additional_updates:
        - outcome:
            location: 
              known: true 
          response_variants:
            - noted the location

  get-location_for_smoke_driven:
    type: custom
    subtype: slot_fill
    condition:
      emergency_type: 
        value: smoke_known_location_required
    parameters:
      action_name:  get-location_for_smoke_driven
      overall_intent: share-location
      entities:
        - location
      message_variants:
        - Whats your best guess where the smoke is coming from?
      fallback_message_variants:
        - Repeat please. 
      
      config_entities:
        location:
          clarify_message_variants:
            - Did you mean $location?
      additional_updates:
        - outcome:
            location: 
              known: true 
          response_variants:
            - noted the location

  get-smoke_description:
    type: custom
    subtype: slot_fill
    condition:
      seen_smoke: 
        value: true
        known: true
    parameters:
      action_name:  get-smoke_description
      overall_intent: share-smoke_description
      entities:
        - smoke_description
      message_variants:
        - Describe the smoke
      fallback_message_variants:
        - Specify wether smoke is black or white?
      
      config_entities:
        smoke_description:
          clarify_message_variants:
            - Did you mean $fire_color?
      additional_updates:
        - outcome:
            smoke_description: 
              known: true 
          response_variants:
            - noted fire color
  
  update-smoke_from_dialog_location_color_known: 
    type: system
    condition:
      smoke_description: 
        known: true
      emergency_type: 
        known: true
        value: smoke_unknown_location_and_fire_known

    effect:
      set-context_known: 
        oneof: 
          outcomes: 
            set-all_context_known:
              updates:  
                know_all_context_for_fire:
                  value: true
 

  update-smell_with_location_guess: 
    type: system
    condition:
      location: 
        known: true
      emergency_type: 
        known: true
        value: smell_known_location_required

    effect:
      set-context_known: 
        oneof: 
          outcomes: 
            set-all_context_known:
              updates:  
                know_all_context_for_fire:
                  value: true


  update-smoke_with_location_guess: 
    type: system
    condition:
      location: 
        known: true
      emergency_type: 
        known: true
        value: smoke_known_location_required

    effect:
      set-context_known: 
        oneof: 
          outcomes: 
            set-all_context_known:
              updates:  
                know_all_context_for_fire:
                  value: true



  update-landing_gear_malfunction_context: 
    type: system
    condition:
      landing_gear_specifier: 
        known: true
      # if i require more actions, the effect of these actions go here

    effect:
      set-context_known: 
        oneof: 
          outcomes: 
            set-all_context_known:
              updates:  
                know_all_context_for_landing_gear_malfunction:
                  value: true

  # I created equivalent of this ind dialogue form 

  # update-health_context: 
  #   type: system
  #   condition:
  #     landing_gear_specifier: 
  #       known: true
  #     # if i require more actions, the effect of these actions go here

  #   effect:
  #     set-context_known: 
  #       oneof: 
  #         outcomes: 
  #           set-all_context_known:
  #             updates:  
  #               know_all_context_for_landing_gear_malfunction:
  #                 value: true


## Before you think you can use context dpendendet determination 
## JUST DONT. The implementation is not yet done so this 
  get-fire_instruction: 
      type: web_plan
      call: 
        endpoint: "http://127.0.0.1:9000/create_plan" 
        default_payload: {
                        "id":1,
                        "domain_file":"/home/qnc/upf-hierarchical/domain/domain_fond.hddl",
                        "problem_file":"/home/qnc/upf-hierarchical/problem/fire.hddl"
        }

      message_variants:
        - Calling the server
      condition: 

        know_all_context_for_fire:
          value: true
        reached_server:
          known: false
        got_fire_instruction:
          value: false 
        
      effect: 
        set-get-fire_instruction: 
          oneof:
            outcomes: 
              update-got_engine_fire_instruction: 
                updates: 
                  reached_server:
                    known: true 
                  got_fire_instruction:
                    value: true
              update-got_engine_fire_instruction_false:
                updates: 
                  reached_server:
                    known: true
                  got_fire_instruction:
                    value: false



  get-landing_gear_instruction: 
      type: web_plan
      call: 
        endpoint: "http://127.0.0.1:9000/create_plan" 
        default_payload: {
                        "id":1,
                        "domain_file":"/home/qnc/upf-hierarchical/domain/domain_fond.hddl",
                        "problem_file":"/home/qnc/upf-hierarchical/problem/fire.hddl"
        }

      message_variants:
        - Calling the server
      condition: 

        know_all_context_for_landing_gear_malfunction:
          value: true
        reached_server:
          known: false
        got_fire_instruction:
          value: false 
        
      effect: 
        set-get-fire_instruction: 
          oneof:
            outcomes: 
              update-got_engine_fire_instruction: 
                updates: 
                  reached_server:
                    known: true 
                  got_landing_gear_instruction:
                    value: true
              update-got_engine_fire_instruction_false:
                updates: 
                  reached_server:
                    known: true
                  got_landing_gear_instruction:
                    value: false


  get-health_instruction: 
      type: web_plan
      call: 
        endpoint: "http://127.0.0.1:9000/create_plan" 
        default_payload: {
                        "id":1,
                        "domain_file":"/home/qnc/upf-hierarchical/domain/domain_fond.hddl",
                        "problem_file":"/home/qnc/upf-hierarchical/problem/fire.hddl"
        }

      message_variants:
        - Calling the server
      condition: 

        know_all_context_for_health:
          value: true
        reached_server:
          known: false
        got_health_instruction:
          value: false 
        
      effect: 
        set-get-fire_instruction: 
          oneof:
            outcomes: 
              update-got_engine_fire_instruction: 
                updates: 
                  reached_server:
                    known: true 
                  got_health_instruction:
                    value: true
              update-got_engine_fire_instruction_false:
                updates: 
                  reached_server:
                    known: true
                  got_health_instruction:
                    value: false

  # final-context: 
  #     type: system 
  #     subtype: Context dependent determination
  #     condition:
        
  #       reached_server:
  #         known: true
  #       got_fire_instruction:
  #         value: false
  #       got_landing_gear_instruction:
  #         value: false 
  #       got_physical_health_instruction:
  #         value: false 
  #       got_mental_health_instruction:
  #         value: false
  #       server_error:
  #         value: false
  #       no_instructions:
  #         value: false


  #     effect:
  #       set-complete: 
  #         oneof:
  #           outcomes:
  #             update-electric_fire: 
  #               updates:
  #                 got_fire_instruction:
  #                   value: true
  #               context:
  #                 reached_server: 
  #                   value: fire
              
              # update-landing_gear: 
              #   updates:
              #     got_landing_gear_instruction:
              #       value: true
              #   context:
              #     reached_server: 
              #       value: landing_gear
              #     server_status:
              #       value: true 

              # update-physical_health: 
              #   updates:
              #     got_physical_health_instruction:
              #       value: true
              #   context:
              #     reached_server: 
              #       value: physical_health
              #     server_status:
              #       value: true 
              # update-mental_health: 
              #   updates:
              #     got_mental_health_instruction:
              #       value: true
              #   context:
              #     reached_server: 
              #       value: mental_health
              #     server_status:
              #       value: true 

              # update-error: 
              #   updates: 
              #     no_instructions: 
              #       value: true
              #   context:
              #     reached_server:
              #       value: none 






  # All of this could be simplified if i add a system update after server call and then do context dependent determination but this works too 
  complete-fire:
    type: system 
    condition: 
      got_fire_instruction:
        value: true
    effect:
      finish:
        oneof:
          outcomes:
            finish:
              updates:
                goal:
                  value: true
  
  complete:
    type: system 
    condition: 
      got_landing_gear_instruction:
        value: true
    effect:
      finish:
        oneof:
          outcomes:
            finish:
              updates:
                goal:
                  value: true
 
  complete_health:
    type: system 
    condition: 
      got_health_instruction:
        value: true
    effect:
      finish:
        oneof:
          outcomes:
            finish:
              updates:
                goal:
                  value: true


  complete_error:
    type: system 
    condition: 
      got_fire_instruction:
        value: false
      got_health_instruction:
        value: false 
      got_landing_gear_instruction:
        value: false
      reached_server:
        known: true
    effect:
      finish:
        oneof:
          outcomes:
            finish:
              updates:
                goal:
                  value: true

 